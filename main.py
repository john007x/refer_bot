import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters
from keep_alive import keep_alive
import json

# Constants
TOKEN = "7764075200:AAGd_gSXxi4fa5edC0EdbkDgqakYJjXHWGg"
CHANNEL_IDS = ["@five_star_official5", "-1002684151914"]  # ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ username ржУ ID
MIN_WITHDRAW = 8400
REFER_AMOUNT = 210

def get_channel_link(channel_id):
    """ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж▓рж┐ржВржХ ржлрж░ржорзЗржЯ ржХрж░рзЗ ржжрзЗржпрж╝рж╛"""
    return f"https://t.me/{channel_id}"

# Data Storage
def load_data():
    if os.path.exists('users.json'):
        with open('users.json', 'r') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open('users.json', 'w') as f:
        json.dump(data, f)

users_data = load_data()

def check_member(update: Update, context: CallbackContext) -> bool:
    """
    Verify if user is a member of the required channels
    Returns True if user is a member, False otherwise
    """
    try:
        user_id = update.effective_user.id
        
        for channel_id in CHANNEL_IDS:
            try:
                # Try to get chat member status
                member = context.bot.get_chat_member(channel_id, user_id)
                
                # Check if user is a member, admin, or creator
                if member.status in ['member', 'administrator', 'creator']:
                    return True
                
            except Exception as e:
                # Log specific error for debugging
                print(f"Error checking channel {channel_id} for user {user_id}: {str(e)}")
                continue
        
        # If we reach here, user is not a member of any required channel
        return False
        
    except Exception as e:
        # Log error and return False in case of any unexpected error
        print(f"Unexpected error in check_member: {str(e)}")
        return False

def start(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)

    # Initialize user data if not exists
    if user_id not in users_data:
        users_data[user_id] = {
            'balance': 0,
            'referrals': [],
            'withdraw_status': False
        }
        save_data(users_data)

    # Check referral
    if len(context.args) > 0:
        referrer_id = context.args[0]
        if referrer_id != user_id and referrer_id in users_data and user_id not in users_data[
                referrer_id]['referrals']:
            users_data[referrer_id]['referrals'].append(user_id)
            users_data[referrer_id]['balance'] += REFER_AMOUNT
            save_data(users_data)

    # Check if user is already a member
    if check_member(update, context):
        show_dashboard(update, context)
        return

    welcome_msg = """рж╕рзНржмрж╛ржЧрждржо!
ржПржЗ ржмржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЖржкржирж┐ рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржЗржиржХрж╛ржо ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред

тЬЕ ржкрзНрж░ржержорзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓ржЯрж┐ ржЬржпрж╝рзЗржи ржХрж░рзБржи:
{}""".format(get_channel_link(CHANNEL_IDS[0]))

    keyboard = [[
        InlineKeyboardButton("ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи",
                             url=get_channel_link(CHANNEL_IDS[0]))
    ], [InlineKeyboardButton("тЬЕ ржЪрзЗржХ ржЬржпрж╝рзЗржи", callback_data='check_join')]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(welcome_msg, reply_markup=reply_markup)


def show_dashboard(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("ЁЯУК ржЖржорж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", callback_data='balance')],
        [InlineKeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ", callback_data='refer_link')],
        [InlineKeyboardButton("ЁЯСе рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛", callback_data='refer_count')],
        [
            InlineKeyboardButton("ЁЯТ╕ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ",
                                 callback_data='withdraw')
        ], [InlineKeyboardButton("тЭУ рж╣рзЗрж▓рзНржк", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Check if this is a callback query or a regular message
    if update.callback_query:
        update.callback_query.message.edit_text(
            "ржорзЗржирзБ ржерзЗржХрзЗ ржпрзЗржХрзЛржирзЛ ржЕржкрж╢ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=reply_markup)
    else:
        update.message.reply_text("ржорзЗржирзБ ржерзЗржХрзЗ ржпрзЗржХрзЛржирзЛ ржЕржкрж╢ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:",
                                  reply_markup=reply_markup)


def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    if query.data == 'check_join':
        # Check if user is already a member
        if check_member(update, context):
            query.edit_message_text(
                "тЬЕ ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржЫрзЗржиред ржПржЦржи ржорзЗржирзБ ржерзЗржХрзЗ ржЕржирзНржп ржЕржкрж╢ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржиред"
            )
            show_dashboard(update, context)
        else:
            # If not a member, show error and keep the join button visible
            query.answer("ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи!")
            # Keep the message with join button visible
            keyboard = [[
                InlineKeyboardButton("ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи",
                                     url=get_channel_link(CHANNEL_IDS[0]))
            ], [InlineKeyboardButton("тЬЕ ржЪрзЗржХ ржЬржпрж╝рзЗржи", callback_data='check_join')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                "ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи ржПржмржВ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗржХ ржХрж░рзБржиред",
                reply_markup=reply_markup
            )
            return

    elif query.data == 'balance':
        balance = users_data[user_id]['balance']
        keyboard = [[InlineKeyboardButton("ЁЯФЩ ржмрзНржпрж╛ржХ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance} ржЯрж╛ржХрж╛", reply_markup=reply_markup)

    elif query.data == 'refer_link':
        refer_link = f"https://t.me/cashgurubd_bot?start={user_id}"
        keyboard = [[InlineKeyboardButton("ЁЯФЩ ржмрзНржпрж╛ржХ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рж╛рж▓ рж▓рж┐ржВржХ:\n\n`{refer_link}`\n\nржПржЗ рж▓рж┐ржВржХ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзЗ рж░рзЗржлрж╛рж░ ржХрж░рзБржи", reply_markup=reply_markup, parse_mode='Markdown')

    elif query.data == 'refer_count':
        referrals = len(users_data[user_id]['referrals'])
        keyboard = [[InlineKeyboardButton("ЁЯФЩ ржмрзНржпрж╛ржХ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"ЁЯСе ржЖржкржирж╛рж░ ржорзЛржЯ рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛: {referrals} ржЬржи", reply_markup=reply_markup)

    elif query.data == 'withdraw':
        balance = users_data[user_id]['balance']
        if balance >= MIN_WITHDRAW:
            # ржЙржЗржержбрзНрж░ ржмрж╛ржЯржи ржжрзЗржЦрж╛ржирзЛ рж╣ржмрзЗ
            keyboard = [
                [InlineKeyboardButton("ЁЯТ░ ржмрж┐ржХрж╛рж╢", callback_data='withdraw_bkash')],
                [InlineKeyboardButton("ЁЯТ░ ржиржЧржж", callback_data='withdraw_nagad')],
                [InlineKeyboardButton("ЁЯТ░ рж░ржХрзЗржЯ", callback_data='withdraw_rocket')],
                [InlineKeyboardButton("ЁЯФЩ ржмрзНржпрж╛ржХ", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text("ЁЯТ╕ ржЙржЗржержбрзНрж░ ржорзЗржержб рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи:", reply_markup=reply_markup)
            return
        else:
            remaining = MIN_WITHDRAW - balance
            keyboard = [[InlineKeyboardButton("ЁЯФЩ ржмрзНржпрж╛ржХ", callback_data='back_to_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                f"тЪая╕П ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ ржЖрж░рзЛ {remaining} ржЯрж╛ржХрж╛ ржПржмржВ {remaining//REFER_AMOUNT} ржЬржи рж░рзЗржлрж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржиред", reply_markup=reply_markup
            )

    elif query.data == 'help':
        help_text = """тЭУ рж╣рзЗрж▓рзНржк рж╕рзЗржХрж╢ржи:

тАв ржкрзНрж░рждрж┐ржЯрж┐ рж░рзЗржлрж╛рж░рзЗ ржЖржкржирж┐ ржкрж╛ржмрзЗржи рзирззрзж ржЯрж╛ржХрж╛
тАв ржорж┐ржирж┐ржорж╛ржо ржЙржЗржержбрзНрж░: рзорзкрзжрзж ржЯрж╛ржХрж╛ (рзкрзж ржЬржи рж░рзЗржлрж╛рж░)
тАв ржкрзЗржорзЗржирзНржЯ рзирзк ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржХрж░рж╛ рж╣ржмрзЗ"""
        keyboard = [[InlineKeyboardButton("ЁЯФЩ ржмрзНржпрж╛ржХ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(help_text, reply_markup=reply_markup)
        
    elif query.data == 'back_to_menu':
        show_dashboard(update, context)
        
    elif query.data.startswith('withdraw_'):
        payment_method = query.data.split('_')[1]
        users_data[user_id]['pending_withdraw'] = {
            'method': payment_method,
            'amount': users_data[user_id]['balance'],
            'status': 'pending'
        }
        save_data(users_data)
        
        query.edit_message_text(f"ЁЯТ│ ржЖржкржирж╛рж░ {payment_method.upper()} ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи:\n\nрж╕рж┐рж╕рзНржЯрзЗржо ржПржЦржи ржЖржкржирж╛рж░ ржирж╛ржорзНржмрж╛рж░ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ...")
        
        # ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ рж╕рзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп рж╕рзНржЯрзЗржЯ рж╕рзЗржЯ ржХрж░рж╛
        context.user_data['waiting_for_payment'] = {
            'method': payment_method,
            'user_id': user_id
        }

    query.answer()


def shanto(update: Update, context: CallbackContext):
    # ржкрзНрж░ржержорзЗ ржПржбржорж┐ржи ржЪрзЗржХ ржХрж░рж╛ рж╣ржмрзЗ
    user_id = str(update.effective_user.id)
    if user_id != "6231391778":  # ржЖржкржирж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ID
        update.message.reply_text("ржЖржкржирж┐ ржПржбржорж┐ржи ржиржиред")
        return

    keyboard = [
        [InlineKeyboardButton("ЁЯУК ржЯрзЛржЯрж╛рж▓ ржЗржиржХрж╛ржо", callback_data='shanto_income')],
        [InlineKeyboardButton("ЁЯСе ржЯрзЛржЯрж╛рж▓ ржЗржЙржЬрж╛рж░", callback_data='shanto_users')],
        [InlineKeyboardButton("ЁЯУК ржЯрзЛржЯрж╛рж▓ рж░рзЗржлрж╛рж░", callback_data='shanto_referrals')],
        [InlineKeyboardButton("ЁЯТ╕ ржЯрзЛржЯрж╛рж▓ ржЙржЗржержбрзНрж░", callback_data='shanto_withdraw')],
        [InlineKeyboardButton("ЁЯУК ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕", callback_data='shanto_stats')],
        [InlineKeyboardButton("ЁЯФН ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕", callback_data='shanto_channels')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text("ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓", reply_markup=reply_markup)


def shanto_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    if data == 'shanto_income':
        total_income = sum(user['balance'] for user in users_data.values())
        query.edit_message_text(f"ржЯрзЛржЯрж╛рж▓ ржЗржиржХрж╛ржо: {total_income} ржЯрж╛ржХрж╛")

    elif data == 'shanto_users':
        total_users = len(users_data)
        query.edit_message_text(f"ржЯрзЛржЯрж╛рж▓ ржЗржЙржЬрж╛рж░: {total_users} ржЬржи")

    elif data == 'shanto_referrals':
        total_referrals = sum(len(user['referrals']) for user in users_data.values())
        query.edit_message_text(f"ржЯрзЛржЯрж╛рж▓ рж░рзЗржлрж╛рж░: {total_referrals} ржЬржи")

    elif data == 'shanto_withdraw':
        total_withdraw = sum(user['balance'] for user in users_data.values() if user.get('withdraw_status', False))
        query.edit_message_text(f"ржЯрзЛржЯрж╛рж▓ ржЙржЗржержбрзНрж░: {total_withdraw} ржЯрж╛ржХрж╛")

    elif data == 'shanto_stats':
        total_users = len(users_data)
        total_referrals = sum(len(user['referrals']) for user in users_data.values())
        total_income = sum(user['balance'] for user in users_data.values())
        total_withdraw = sum(user['balance'] for user in users_data.values() if user.get('withdraw_status', False))

        stats = f"""ЁЯУК ржЗржЙржЬрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж┐рж╕рзНржЯрж┐ржХрзНрж╕:
тАв ржЯрзЛржЯрж╛рж▓ ржЗржЙржЬрж╛рж░: {total_users} ржЬржи
тАв ржЯрзЛржЯрж╛рж▓ рж░рзЗржлрж╛рж░: {total_referrals} ржЬржи
тАв ржЯрзЛржЯрж╛рж▓ ржЗржиржХрж╛ржо: {total_income} ржЯрж╛ржХрж╛
тАв ржЯрзЛржЯрж╛рж▓ ржЙржЗржержбрзНрж░: {total_withdraw} ржЯрж╛ржХрж╛"""
        query.edit_message_text(stats)

    elif data == 'shanto_channels':
        channels = []
        for channel_id in CHANNEL_IDS:
            try:
                chat = context.bot.get_chat(channel_id)
                if chat.type == 'channel':
                    bot_member = context.bot.get_chat_member(channel_id, context.bot.id)
                    status = "ржПржбржорж┐ржи" if bot_member.status in ['administrator', 'creator'] else "ржорзЗржорзНржмрж╛рж░"
                    channels.append(f"@{channel_id} - {status}")
            except Exception as e:
                print(f"Error checking channel {channel_id}: {str(e)}")
                continue
        
        if channels:
            message = "ржЪрзНржпрж╛ржирзЗрж▓ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:\n\n" + "\n".join(channels)
        else:
            message = "ржХрзЛржирзЛ ржЪрзНржпрж╛ржирзЗрж▓ ржирзЗржЗред"
        
        query.edit_message_text(message)

    query.answer()


def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    text = update.message.text
    
    # ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛
    if 'waiting_for_payment' in context.user_data:
        payment_info = context.user_data['waiting_for_payment']
        payment_user_id = payment_info['user_id']
        payment_method = payment_info['method']
        
        # ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ рж╕рзЗржн ржХрж░рж╛
        users_data[payment_user_id]['pending_withdraw']['number'] = text
        users_data[payment_user_id]['withdraw_status'] = True
        save_data(users_data)
        
        # ржПржбржорж┐ржиржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ
        admin_notification = f"""ЁЯУв ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ!

ЁЯСд ржЗржЙржЬрж╛рж░: {update.effective_user.first_name}
ЁЯТ│ ржорзЗржержб: {payment_method.upper()}
ЁЯТ░ ржПржорж╛ржЙржирзНржЯ: {users_data[payment_user_id]['pending_withdraw']['amount']} ржЯрж╛ржХрж╛
ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: {text}"""
        
        try:
            context.bot.send_message(chat_id="6231391778", text=admin_notification)
        except Exception as e:
            print(f"Error sending admin notification: {str(e)}")
        
        # ржЗржЙржЬрж╛рж░ржХрзЗ ржХржиржлрж╛рж░рзНржорзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ
        keyboard = [[InlineKeyboardButton("ЁЯФЩ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"""тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕рж╛ржмржорж┐ржЯ рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯТ│ ржорзЗржержб: {payment_method.upper()}
ЁЯТ░ ржПржорж╛ржЙржирзНржЯ: {users_data[payment_user_id]['pending_withdraw']['amount']} ржЯрж╛ржХрж╛
ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: {text}

ржкрзЗржорзЗржирзНржЯ рзирзк ржШржгрзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржХрж░рж╛ рж╣ржмрзЗред""",
            reply_markup=reply_markup
        )
        
        # рж╕рзНржЯрзЗржЯ ржХрзНрж▓рж┐ржпрж╝рж╛рж░ ржХрж░рж╛
        del context.user_data['waiting_for_payment']
    else:
        # ржЕржирзНржпрж╛ржирзНржп ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж┐ржВ
        update.message.reply_text(
            "ржжржпрж╝рж╛ ржХрж░рзЗ /start ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ ржмржЯ рж╢рзБрж░рзБ ржХрж░рзБржиред"
        )


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("shanto", shanto))
    # ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржУржнрж╛рж░рж▓рзНржпрж╛ржкрж┐ржВ ржарж┐ржХ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    dp.add_handler(CallbackQueryHandler(shanto_callback, pattern='^shanto_'))
    dp.add_handler(CallbackQueryHandler(button_callback))
    
    # ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    keep_alive()
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
